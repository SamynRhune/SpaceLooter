@using ActionCommandGame.Services.Model.Core
@using ActionCommandGame.Services.Model.Results
@using ActionCommandGame.Extensions;
@model GameOverview;
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <a asp-controller="Home" asp-action="Index"><img id="homelogo" src="~/img/homeW.png" alt="homeLogo" /></a>
    <a asp-controller="Account" asp-action="UpdateAccount" asp-route-playerId="@Model.GameResult.Player.Id"><img id="accountlogo" src="~/img/accountLogo2.png" alt="accountlogo" /></a>
    <a  asp-controller="Shop" asp-action="Index" asp-route-playerId="@Model.GameResult.Player.Id"><img id="shoplogo" src="~/img/shop.png" alt="shoplogo" /></a>

    <h1 class="display-4">Space Looter</h1>
    <p>Press The Spaceship To Go Looting</p>
    <a id="lootButton" asp-controller="Game" asp-action="Loot" asp-route-playerId="@Model.GameResult.Player.Id"><img class="move-middle" id="spaceship" src="~/img/spaceshipLeft.png" alt="spaceship" /></a>
    <div class="last-element first-element">
    @{
        if(@Model.GameResult.PositiveGameEvent != null)
        {
            <p id="positiveGameEvent">@Model.GameResult.PositiveGameEvent.Name<br /> @Model.GameResult.PositiveGameEvent.Description <br /> +@Model.GameResult.PositiveGameEvent.Money Money <br /> +@Model.GameResult.PositiveGameEvent.Experience Experience</p>
            if(Model.GameResult.NegativeGameEvent != null)
            {
                <p id="negativeGameEvent">@Model.GameResult.NegativeGameEvent.Name<br />@Model.GameResult.NegativeGameEvent.Description</p>
            }
            else
            {
                <p>No negative game events</p>
            }
        }
        if(Model.GameResult != null && Model.GameResult.NegativeGameEventMessages != null)
        {
            foreach (ServiceMessage serviceMessage in Model.GameResult.NegativeGameEventMessages)
            {
                var klasse = "SM" + @serviceMessage.MessagePriority;

                <div class=@klasse>
                    <h3>@serviceMessage.MessagePriority</h3>
                    <p class="">@serviceMessage.Message</p>
                </div>
            }
        }
        if(Model.ServiceMessages != null && Model.ServiceMessages.Count > 0)
        {
            foreach (ServiceMessage serviceMessage in Model.ServiceMessages)
            {
                var klasse = "SM" + @serviceMessage.MessagePriority;

                <div class=@klasse>
                    <h3>@serviceMessage.MessagePriority</h3>
                    <p class="">@serviceMessage.Message</p>
                </div>
            }
        }
        
    }
    </div>
    @{

        var attackPlayerItem = Model.PlayerItems.ToList().Find(a => a.Id == Model.GameResult.Player.CurrentAttackPlayerItemId);
        var defensePlayerItem = Model.PlayerItems.ToList().Find(a => a.Id == Model.GameResult.Player.CurrentDefensePlayerItemId);
        var fuelPlayerItem = Model.PlayerItems.ToList().Find(a => a.Id == Model.GameResult.Player.CurrentFuelPlayerItemId);
        ItemResult attackItem = null;
        ItemResult defenseItem = null;
        ItemResult fuelItem = null;
        if(attackPlayerItem != null)
        {
            attackItem = Model.Items.ToList().Find(a => a.Id == attackPlayerItem.ItemId);
        }        
        if(defensePlayerItem != null)
        {
            defenseItem = Model.Items.ToList().Find(a => a.Id == defensePlayerItem.ItemId);
        }
        if(fuelPlayerItem != null)
        {
            fuelItem = Model.Items.ToList().Find(a => a.Id == fuelPlayerItem.ItemId);
        }


    }

    @{
        var maxProgress = Model.GameResult.Player.GetExperienceForNextLevel() - Model.GameResult.Player.GetExperienceFromCurrentLevel();
        var currentProgress = Model.GameResult.Player.Experience - Model.GameResult.Player.GetExperienceFromCurrentLevel();
    }
    <footer id="playerInfo">
        
        <progress id="levelProgress" max="@maxProgress" value="@currentProgress"></progress>
        <p>@Model.GameResult.Player.Name - Money:@Model.GameResult.Player.Money -  Level:@Model.GameResult.Player.GetLevelFromExperience()</p>
        <p>@(attackItem != null ? attackItem.Name + " [" + @attackPlayerItem.RemainingAttack + "/" + @attackItem.Attack + "]" : "[Empty]") - @(defenseItem != null ? defenseItem.Name + " [" + @defensePlayerItem.RemainingDefense + "/" + @defenseItem.Defense + "]" : "[Empty]") - @(fuelItem != null ? fuelItem.Name + " [" + @fuelPlayerItem.RemainingFuel + "/" + @fuelItem.Fuel + "]" : "[Empty]") </p>

    </footer>
</div>
<script>
    document.addEventListener('DOMContentLoaded', (event) => {
        // Ensure the animation starts once the page is loaded
        document.getElementById('spaceship').classList.add('move-middle');
    });

    document.getElementById('lootButton').addEventListener('click', function (event) {
        event.preventDefault(); // Prevent the default link behavior

        var img = document.getElementById('spaceship');
        img.classList.remove('move-middle'); // Remove initial animation class if needed
        img.classList.add('move-left');

        // Get the URL from the anchor tag
        var href = this.href;

        // Listen for the end of the animation
        img.addEventListener('animationend', function () {
            // Proceed to the server-side action
            window.location.href = href;
        }, { once: true }); // { once: true } ensures the event listener is removed after execution
    });
</script>